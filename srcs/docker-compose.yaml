version: '3'

services:
  nginx:
    build: 
      context: ./requirements/nginx
      dockerfile: Dockerfile
    image: nginx:${TAG}
    container_name: nginx
    restart: always
    env_file:
      - .env
    expose:
      - 443
    ports:
      - "443:443"
    volumes:
      - wordpress_volume:/var/www/wordpress
    depends_on:
      wordpress:
        condition: service_healthy
      adminer:
        condition: service_healthy
    networks:
      - inception
    
  mariadb:
    build:
      context: ./requirements/mariadb
      dockerfile: Dockerfile
    image: mariadb:${TAG}
    container_name: mariadb
    restart: always
    env_file:
      - .env
    expose:
      - 3306
    volumes:
      - mariadb_volume:/var/lib/mysql
    networks:
      - inception
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--silent"]
      start_period: 5s
      timeout: 10s
      retries: 3

  wordpress:
    build:
      context: ./requirements/wordpress
      dockerfile: Dockerfile
    image: wordpress:${TAG}
    container_name: wordpress
    restart: always
    env_file:
      - .env
    expose:
      - 9000
    volumes:
      - wordpress_volume:/var/www/wordpress
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inception
    healthcheck:
      test: netstat -an | grep 9000 > /dev/null; if [ 0 != $$? ]; then exit 1; fi;
      start_period: 5s
      timeout: 10s
      retries: 5

  ftp_server:
      build:
        context: ./requirements/bonus/ftp_server
        dockerfile: Dockerfile
      image: ftp_server:${TAG}
      container_name: ftp_server
      restart: always
      env_file:
        - .env
      expose:
        - 21
      ports:
        - "21:21"
        - "40100-40200:40100-40200"
      volumes:
        - wordpress_volume:/var/www/wordpress
      networks:
        - inception
      depends_on:
        wordpress:
          condition: service_healthy

  redis:
      build:
        context: ./requirements/bonus/redis
        dockerfile: Dockerfile
      image: redis:${TAG}
      container_name: redis
      restart: always
      env_file:
        - .env
      expose:
        - 6379
      ports:
        - "6379:6379"
      networks:
        - inception
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        start_period: 5s
        timeout: 10s
        retries: 3

  adminer:
      build:
        context: ./requirements/bonus/adminer
        dockerfile: Dockerfile
      image: adminer:${TAG}
      container_name: adminer
      restart: always
      env_file:
        - .env
      expose:
        - 9000
      networks:
        - inception
      healthcheck:
        test: netstat -an | grep 9000 > /dev/null; if [ 0 != $$? ]; then exit 1; fi;
        start_period: 5s
        timeout: 10s
        retries: 5

  static_page:
      build:
        context: ./requirements/bonus/static_page
        dockerfile: Dockerfile
      image: static_page:${TAG}
      container_name: static_page
      restart: always
      env_file:
        - .env
      expose:
        - 3000
      ports:
        - "3000:3000"
      networks:
        - inception

  cadvisor:
      build:
        context: ./requirements/bonus/cadvisor
        dockerfile: Dockerfile
      image: cadvisor:${TAG}
      container_name: cadvisor
      restart: always
      env_file:
        - .env
      expose:
        - 8080
      ports:
        - "8080:8080"
      networks:
        - inception
      volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:ro 
        - /sys:/sys:ro 
        - /var/lib/docker/:/var/lib/docker:ro
        - /dev/disk/:/dev/disk:ro

volumes:
  mariadb_volume:
    # Specifying a custom volume name
    name: mariadb_volume
    # Specifying that the volume will be created on the local file system of the host machine
    # other options include: nfs, s3, azure..., each driver has driver specific options
    driver: local
    # Specifying driver specific options
    driver_opts:
      # Specifying the path on the host machine where the volume will be created
      device: /home/mbouthai/data/mariadb
      # Specifiying the type of the volume, in this case it's set to "none" indicating
      # it's a basic local volume without any special storage type
      type: local
      # Specifying "options" to "bind" enabling bind propagation mode, which allow for
      # bi-directional changes to be reflected on each side
      o: bind
      
  wordpress_volume:
    name: wordpress_volume
    driver: local
    driver_opts:
      device: /home/mbouthai/data/wordpress
      type: local
      o: bind


networks:
  inception:
    # Specifying a name for the network
    name: inception
    # Specifying a network driver for the network, with the bridge dirver, Docker creates a 
    # private internal network on the host , allowing containers to be able to communicate 
    # with each other, while also having access to the external network through 
    # NAT (Network Address Translation)
    driver: bridge